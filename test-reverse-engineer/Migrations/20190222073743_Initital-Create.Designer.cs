// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test_reverse_engineer.Models;

namespace test_reverse_engineer.Migrations
{
    [DbContext(typeof(pmo_db5Context))]
    [Migration("20190222073743_Initital-Create")]
    partial class InititalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("test_reverse_engineer.Models.Assign", b =>
                {
                    b.Property<int>("AssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ASSIGN_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AssignCreatedDate")
                        .HasColumnName("ASSIGN_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("AssignModifiedDate")
                        .HasColumnName("ASSIGN_MODIFIED_DATE")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.Property<int?>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<int?>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("AssignId");

                    b.HasIndex("ProjectId")
                        .HasName("RELATIONSHIP_1_FK");

                    b.HasIndex("RoleId")
                        .HasName("RELATIONSHIP_2_FK");

                    b.HasIndex("UserId")
                        .HasName("RELATIONSHIP_3_FK");

                    b.ToTable("ASSIGN");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Closing", b =>
                {
                    b.Property<int>("ClosingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CLOSING_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClosingLessonLearned")
                        .HasColumnName("CLOSING_LESSON_LEARNED")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.HasKey("ClosingId");

                    b.HasIndex("ProjectId")
                        .HasName("RELATIONSHIP_9_FK");

                    b.ToTable("CLOSING");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Document", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DOC_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocCategory")
                        .HasColumnName("DOC_CATEGORY")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("DocCreatedDate")
                        .HasColumnName("DOC_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("DocDescription")
                        .HasColumnName("DOC_DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<string>("DocFormat")
                        .HasColumnName("DOC_FORMAT")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("DocModifiedDate")
                        .HasColumnName("DOC_MODIFIED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("DocName")
                        .HasColumnName("DOC_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("DocSize")
                        .HasColumnName("DOC_SIZE")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("DocStatus")
                        .HasColumnName("DOC_STATUS")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("DocStream")
                        .HasColumnName("DOC_STREAM");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.HasKey("DocId");

                    b.HasIndex("ProjectId")
                        .HasName("RELATIONSHIP_14_FK");

                    b.ToTable("DOCUMENT");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Execute", b =>
                {
                    b.Property<int>("ExecuteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EXECUTE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExecuteLessonLearned")
                        .HasColumnName("EXECUTE_LESSON_LEARNED")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.HasKey("ExecuteId");

                    b.HasIndex("ProjectId")
                        .HasName("RELATIONSHIP_11_FK");

                    b.ToTable("EXECUTE");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Initiative", b =>
                {
                    b.Property<int>("InitiativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INITIATIVE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcknowledgedBy")
                        .HasColumnName("ACKNOWLEDGED_BY")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AgreedBy")
                        .HasColumnName("AGREED_BY")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BackgroundInformation")
                        .HasColumnName("BACKGROUND_INFORMATION")
                        .HasColumnType("text");

                    b.Property<decimal?>("Building")
                        .HasColumnName("BUILDING")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Contingency")
                        .HasColumnName("CONTINGENCY")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Equipment")
                        .HasColumnName("EQUIPMENT")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ExecutiveSummary")
                        .HasColumnName("EXECUTIVE_SUMMARY")
                        .HasColumnType("text");

                    b.Property<decimal?>("ExpenseUnderDevelopment")
                        .HasColumnName("EXPENSE_UNDER_DEVELOPMENT")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Infrastructure")
                        .HasColumnName("INFRASTRUCTURE")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("InitiativeLessonLearned")
                        .HasColumnName("INITIATIVE_LESSON_LEARNED")
                        .HasColumnType("text");

                    b.Property<string>("InitiativeTitle")
                        .HasColumnName("INITIATIVE_TITLE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("LandCompensation")
                        .HasColumnName("LAND_COMPENSATION")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("LandImprovement")
                        .HasColumnName("LAND_IMPROVEMENT")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Objective")
                        .HasColumnName("OBJECTIVE")
                        .HasColumnType("text");

                    b.Property<string>("ObjectiveBenefit")
                        .HasColumnName("OBJECTIVE_BENEFIT")
                        .HasColumnType("text");

                    b.Property<decimal?>("PlantMachine")
                        .HasColumnName("PLANT_MACHINE")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("PreparedDate")
                        .HasColumnName("PREPARED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ProjectDefinition")
                        .HasColumnName("PROJECT_DEFINITION")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("RequestedBy")
                        .HasColumnName("REQUESTED_BY")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Timeline")
                        .HasColumnName("TIMELINE")
                        .HasColumnType("text");

                    b.Property<decimal?>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Vision")
                        .HasColumnName("VISION")
                        .HasColumnType("text");

                    b.Property<decimal?>("WorkingCapital")
                        .HasColumnName("WORKING_CAPITAL")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("InitiativeId");

                    b.HasIndex("ProjectId")
                        .HasName("RELATIONSHIP_7_FK");

                    b.ToTable("INITIATIVE");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PERMISSION_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PermissionCreatedDate")
                        .HasColumnName("PERMISSION_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PermissionModifiedDate")
                        .HasColumnName("PERMISSION_MODIFIED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PermissionName")
                        .HasColumnName("PERMISSION_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PermissionId");

                    b.ToTable("PERMISSION");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PLAN_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlanLessonLearned")
                        .HasColumnName("PLAN_LESSON_LEARNED")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.HasKey("PlanId");

                    b.HasIndex("ProjectId")
                        .HasName("RELATIONSHIP_13_FK");

                    b.ToTable("PLAN");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROJECT_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClosingId")
                        .HasColumnName("CLOSING_ID");

                    b.Property<int?>("ExecuteId")
                        .HasColumnName("EXECUTE_ID");

                    b.Property<int?>("InitiativeId")
                        .HasColumnName("INITIATIVE_ID");

                    b.Property<int?>("PlanId")
                        .HasColumnName("PLAN_ID");

                    b.Property<string>("ProjectCategory")
                        .HasColumnName("PROJECT_CATEGORY")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("ProjectCreatedDate")
                        .HasColumnName("PROJECT_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ProjectDescription")
                        .HasColumnName("PROJECT_DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProjectModifiedDate")
                        .HasColumnName("PROJECT_MODIFIED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ProjectStatus")
                        .HasColumnName("PROJECT_STATUS")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("ProjectTitle")
                        .HasColumnName("PROJECT_TITLE")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("ProjectId");

                    b.HasIndex("ClosingId")
                        .HasName("RELATIONSHIP_8_FK");

                    b.HasIndex("ExecuteId")
                        .HasName("RELATIONSHIP_10_FK");

                    b.HasIndex("InitiativeId")
                        .HasName("RELATIONSHIP_6_FK");

                    b.HasIndex("PlanId")
                        .HasName("RELATIONSHIP_12_FK");

                    b.ToTable("PROJECT");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ROLE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RoleCreatedDate")
                        .HasColumnName("ROLE_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RoleModifiedDate")
                        .HasColumnName("ROLE_MODIFIED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleName")
                        .HasColumnName("ROLE_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RoleId");

                    b.ToTable("ROLE");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.RoleHasPermission", b =>
                {
                    b.Property<int>("RhpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RHP_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<int>("PermissionId")
                        .HasColumnName("PERMISSION_ID");

                    b.Property<DateTime>("RhpCreatedDate")
                        .HasColumnName("RHP_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RhpModifiedDate")
                        .HasColumnName("RHP_MODIFIED_DATE")
                        .HasColumnType("datetime");

                    b.HasKey("RhpId", "RoleId", "PermissionId");

                    b.HasIndex("PermissionId")
                        .HasName("RELATIONSHIP_5_FK");

                    b.HasIndex("RoleId")
                        .HasName("RELATIONSHIP_4_FK");

                    b.ToTable("ROLE_HAS_PERMISSION");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("UserCreatedDate")
                        .HasColumnName("USER_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("UserEmail")
                        .HasColumnName("USER_EMAIL")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("UserModifiedDate")
                        .HasColumnName("USER_MODIFIED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasColumnName("USER_NAME")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UserPassword")
                        .HasColumnName("USER_PASSWORD")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("UserStatus")
                        .HasColumnName("USER_STATUS")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Assign", b =>
                {
                    b.HasOne("test_reverse_engineer.Models.Project", "Project")
                        .WithMany("Assign")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ASSIGN_RELATIONS_PROJECT");

                    b.HasOne("test_reverse_engineer.Models.Role", "Role")
                        .WithMany("Assign")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_ASSIGN_RELATIONS_ROLE");

                    b.HasOne("test_reverse_engineer.Models.User", "User")
                        .WithMany("Assign")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ASSIGN_RELATIONS_USER");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Closing", b =>
                {
                    b.HasOne("test_reverse_engineer.Models.Project", "Project")
                        .WithMany("Closing")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CLOSING_RELATIONS_PROJECT");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Document", b =>
                {
                    b.HasOne("test_reverse_engineer.Models.Project", "Project")
                        .WithMany("Document")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_DOCUMENT_RELATIONS_PROJECT");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Execute", b =>
                {
                    b.HasOne("test_reverse_engineer.Models.Project", "Project")
                        .WithMany("Execute")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_EXECUTE_RELATIONS_PROJECT");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Initiative", b =>
                {
                    b.HasOne("test_reverse_engineer.Models.Project", "Project")
                        .WithMany("Initiative")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_INITIATI_RELATIONS_PROJECT");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Plan", b =>
                {
                    b.HasOne("test_reverse_engineer.Models.Project", "Project")
                        .WithMany("Plan")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_PLAN_RELATIONS_PROJECT");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.Project", b =>
                {
                    b.HasOne("test_reverse_engineer.Models.Closing", "ClosingNavigation")
                        .WithMany("ProjectNavigation")
                        .HasForeignKey("ClosingId")
                        .HasConstraintName("FK_PROJECT_RELATIONS_CLOSING");

                    b.HasOne("test_reverse_engineer.Models.Execute", "ExecuteNavigation")
                        .WithMany("ProjectNavigation")
                        .HasForeignKey("ExecuteId")
                        .HasConstraintName("FK_PROJECT_RELATIONS_EXECUTE");

                    b.HasOne("test_reverse_engineer.Models.Initiative", "InitiativeNavigation")
                        .WithMany("ProjectNavigation")
                        .HasForeignKey("InitiativeId")
                        .HasConstraintName("FK_PROJECT_RELATIONS_INITIATI");

                    b.HasOne("test_reverse_engineer.Models.Plan", "PlanNavigation")
                        .WithMany("ProjectNavigation")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_PROJECT_RELATIONS_PLAN");
                });

            modelBuilder.Entity("test_reverse_engineer.Models.RoleHasPermission", b =>
                {
                    b.HasOne("test_reverse_engineer.Models.Permission", "Permission")
                        .WithMany("RoleHasPermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_ROLE_HAS_RELATIONS_PERMISSI");

                    b.HasOne("test_reverse_engineer.Models.Role", "Role")
                        .WithMany("RoleHasPermission")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_ROLE_HAS_RELATIONS_ROLE");
                });
#pragma warning restore 612, 618
        }
    }
}
